/*******************************************************************************
 * Obstacle Factory
 */
define(['./constants', './point', './line', './obstacle'], function(Constants, Point, Line, Obstacle){
    function adjustCorner(corner, movedir){
        var moveamt = Constants.zombieSize;
        var result = new Point(corner.x, corner.y);
        if(movedir.includes('n'))
            result.y -= moveamt;
        if(movedir.includes('s'))
            result.y += moveamt;
        if(movedir.includes('w'))
            result.x -= moveamt;
        if(movedir.includes('e'))
            result.x += moveamt;
        return result;
    }
    function adjustCorners(corners, movedirs){
        var results = [];
        for(i = corners.length; i--; ){
            results.push(adjustCorner(corners[i], movedirs[i]));
        }
        return results;
    }
    // returns a list of potential obstacles
    function getObstacles(){
        var wallLength = Constants.gridSize/2;

        var middle = new Point(wallLength, wallLength);
        var topEdge = new Point(wallLength, 0);
        var bottomEdge = new Point(wallLength, wallLength*2);
        var leftEdge = new Point(0, wallLength);
        var rightEdge = new Point(wallLength*2, wallLength);
        var topMid = new Point(wallLength, wallLength/2);
        var bottomMid = new Point(wallLength, wallLength*3/2);
        var leftMid = new Point(wallLength/2, wallLength);
        var rightMid = new Point(wallLength*3/2, wallLength);

        // corners
        var tl = new Point(0, 0);
        var tr = new Point(wallLength*2, 0);
        var bl = new Point(0, wallLength*2);
        var br = new Point(wallLength*2, wallLength*2);

        // lines spanning 2 wall lengths
        var lineV2 = new Line(topEdge, bottomEdge);
        var lineH2 = new Line(leftEdge, rightEdge);
        //  lines spanning 1 wall length
        var lineV1a = new Line(topEdge, middle);
        var lineV1b = new Line(middle, bottomEdge);
        var lineH1a = new Line(leftEdge, middle);
        var lineH1b = new Line(middle, rightEdge);
        // lines spanning half a wall length
        var lineV12a = new Line(topEdge, topMid);
        var lineV12b = new Line(topMid, middle);
        var lineV12c = new Line(middle, bottomMid);
        var lineV12d = new Line(bottomMid, bottomEdge);
        var lineH12a = new Line(leftEdge, leftMid);
        var lineH12b = new Line(leftMid, middle);
        var lineH12c = new Line(middle, rightMid);
        var lineH12d = new Line(rightMid, rightEdge);
        // lines spanning 3/2 a wall length
        var lineV32a = new Line(topEdge, bottomMid);
        var lineV32b = new Line(topMid, bottomEdge);
        var lineH32a = new Line(leftEdge, rightMid);
        var lineH32b = new Line(leftMid, rightEdge);

        var c_a = adjustCorners([topEdge, topEdge, bottomMid, bottomMid], ['nw', 'ne', 'sw', 'se']);
        var c_b = adjustCorners([topMid, topMid, bottomEdge, bottomEdge], ['nw', 'ne', 'sw', 'se']);
        var c_c = adjustCorners([leftEdge, leftEdge, rightMid, rightMid], ['nw', 'sw', 'ne', 'se']);
        var c_d = adjustCorners([leftMid, leftMid, rightEdge, rightEdge], ['nw', 'sw', 'ne', 'se']);
        var c_e = adjustCorners([topEdge, topEdge, leftMid, leftMid, rightMid, rightMid], ['nw', 'ne', 'nw', 'sw', 'ne', 'se']);
        var c_f = adjustCorners([bottomEdge, bottomEdge, leftMid, leftMid, rightMid, rightMid], ['sw', 'se', 'nw', 'sw', 'ne', 'se']);
        var c_g = adjustCorners([leftEdge, leftEdge, topMid, topMid, bottomMid, bottomMid], ['nw', 'sw', 'nw', 'ne', 'sw', 'se']);
        var c_h = adjustCorners([rightEdge, rightEdge, topMid, topMid, bottomMid, bottomMid], ['ne', 'se', 'nw', 'ne', 'sw', 'se']);

        allCorners = [tl, tr, bl, br];

        // used for reference do not alter
        return [
            new Obstacle([lineV32a],c_a),
            new Obstacle([lineV32b],c_b),
            new Obstacle([lineH32a],c_c),
            new Obstacle([lineH32b],c_d),
            new Obstacle([lineV1a, lineH12b, lineH12c], c_e),
            new Obstacle([lineV1b, lineH12b, lineH12c], c_f),
            new Obstacle([lineH1a, lineV12b, lineV12c], c_g),
            new Obstacle([lineH1b, lineV12b, lineV12c], c_h)
        ];
    }

    function ObstacleFactory(){
        this.obs = getObstacles();
    }
    ObstacleFactory.prototype.getRandomObs = function(x, y){
        var rand = Math.floor(Math.random()*this.obs.length);
        return this.obs[rand].copy().adjust(x, y);
    };
    return ObstacleFactory;
});
